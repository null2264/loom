diff --git a/build.gradle b/build.gradle
index 570cb354..06ee1b26 100644
--- a/build.gradle
+++ b/build.gradle
@@ -164,6 +164,10 @@ dependencies {
 	// Forge mods.toml parsing
 	implementation libs.night.config.toml
 
+	//>> null
+	implementation "org.apache.maven:maven-artifact:3.6.1"
+	//<<
+
 	// Testing
 	testImplementation(gradleTestKit())
 	testImplementation(testLibs.spock) {
diff --git a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
index 845106f3..80d04e43 100644
--- a/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
+++ b/src/main/java/net/fabricmc/loom/build/nesting/JarNester.java
@@ -180,7 +180,7 @@ public class JarNester {
 			JsonObject versionObject = new JsonObject();
 			identifierObject.addProperty("group", metadata.group());
 			identifierObject.addProperty("artifact", metadata.name());
-			versionObject.addProperty("range", "[" + metadata.version() + ",)");
+			versionObject.addProperty("range", metadata.versionRange());
 			versionObject.addProperty("artifactVersion", metadata.version());
 			jsonObject.add("identifier", identifierObject);
 			jsonObject.add("version", versionObject);
diff --git a/src/main/java/net/fabricmc/loom/build/nesting/NestableJarGenerationTask.java b/src/main/java/net/fabricmc/loom/build/nesting/NestableJarGenerationTask.java
index 86a11e8d..8f79f4a4 100644
--- a/src/main/java/net/fabricmc/loom/build/nesting/NestableJarGenerationTask.java
+++ b/src/main/java/net/fabricmc/loom/build/nesting/NestableJarGenerationTask.java
@@ -42,10 +42,15 @@ import javax.inject.Inject;
 import com.google.common.hash.Hashing;
 import com.google.gson.JsonObject;
 import org.apache.commons.io.FileUtils;
+import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
+import org.apache.maven.artifact.versioning.VersionRange;
 import org.gradle.api.artifacts.ArtifactView;
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.component.ComponentIdentifier;
+import org.gradle.api.artifacts.component.ComponentSelector;
 import org.gradle.api.artifacts.component.ModuleComponentIdentifier;
+import org.gradle.api.artifacts.component.ModuleComponentSelector;
+import org.gradle.api.artifacts.result.ResolvedDependencyResult;
 import org.gradle.api.artifacts.result.ResolvedVariantResult;
 import org.gradle.api.artifacts.type.ArtifactTypeDefinition;
 import org.gradle.api.file.ConfigurableFileCollection;
@@ -127,6 +132,32 @@ public abstract class NestableJarGenerationTask extends AbstractLoomTask {
 	}
 
 	public void from(Configuration configuration) {
+		Map<String, String> versionRangeMap = new HashMap<>();
+		configuration.getIncoming().getResolutionResult().getRootComponent().get().getDependencies().forEach(result -> {
+			if (!(result instanceof ResolvedDependencyResult)) return;
+			ResolvedDependencyResult resolvedResult = (ResolvedDependencyResult) result;
+			ComponentSelector requested = resolvedResult.getRequested();
+			ResolvedVariantResult variant = resolvedResult.getResolvedVariant();
+			ComponentIdentifier id = variant.getOwner();
+
+			String versionRange = null;
+			if (requested instanceof ModuleComponentSelector) {
+				ModuleComponentSelector requestedModule = (ModuleComponentSelector) requested;
+				if (isValidVersionRange(requestedModule.getVersionConstraint().getStrictVersion())) {
+					versionRange = requestedModule.getVersionConstraint().getStrictVersion();
+				} else if (isValidVersionRange(requestedModule.getVersionConstraint().getRequiredVersion())) {
+					versionRange = requestedModule.getVersionConstraint().getRequiredVersion();
+				} else if (isValidVersionRange(requestedModule.getVersionConstraint().getPreferredVersion())) {
+					versionRange = requestedModule.getVersionConstraint().getPreferredVersion();
+				} if (isValidVersionRange(requestedModule.getVersion())) {
+					versionRange = requestedModule.getVersion();
+				}
+			}
+
+			if (versionRange == null) return;
+
+			versionRangeMap.put(id.toString(), versionRange);
+		});
 		ArtifactView artifacts = configuration.getIncoming().artifactView(config -> {
 			config.attributes(
 					attr -> attr.attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.JAR_TYPE)
@@ -147,12 +178,25 @@ public abstract class NestableJarGenerationTask extends AbstractLoomTask {
 							moduleIdentifier.getGroup(),
 							moduleIdentifier.getModule(),
 							moduleIdentifier.getVersion(),
-							null
+							null,
+							versionRangeMap.getOrDefault(
+									id.toString(),
+									makeOpenVersionRange(moduleIdentifier.getVersion())
+							)
 					);
 				}
 
 				List<Metadata> capabilityLocations = variant.getCapabilities().stream()
-						.map(capability -> new Metadata(capability.getGroup(), capability.getName(), capability.getVersion(), null))
+						.map(capability -> new Metadata(
+								capability.getGroup(),
+								capability.getName(),
+								capability.getVersion(),
+								null,
+								versionRangeMap.getOrDefault(
+										id.toString(),
+										makeOpenVersionRange(capability.getVersion())
+								)
+						))
 						.toList();
 
 				if (!capabilityLocations.isEmpty() && (moduleLocation == null || !capabilityLocations.contains(moduleLocation))) {
@@ -169,6 +213,9 @@ public abstract class NestableJarGenerationTask extends AbstractLoomTask {
 				String name = moduleLocation.name;
 				String version = moduleLocation.version;
 				String classifier = null;
+				//>> null
+				String versionRange = moduleLocation.versionRange;
+				//<<
 
 				if (artifact.getFile().getName().startsWith(name + "-" + version + "-")) {
 					String rest = artifact.getFile().getName().substring(name.length() + version.length() + 2);
@@ -179,13 +226,31 @@ public abstract class NestableJarGenerationTask extends AbstractLoomTask {
 					}
 				}
 
-				Metadata metadata = new Metadata(group, name, version, classifier);
+				Metadata metadata = new Metadata(group, name, version, classifier, versionRange);
 				map.put(artifact.getFile().getName(), metadata);
 			});
 			return map;
 		}));
 	}
 
+	//>> null
+	private static String makeOpenVersionRange(String version) {
+		return "[" + version + ",)";
+	}
+
+	private static boolean isValidVersionRange(final @Nullable String range) {
+		if (range == null) {
+			return false;
+		}
+		try {
+			final VersionRange data = VersionRange.createFromVersionSpec(range);
+			return data.hasRestrictions() && data.getRecommendedVersion() == null && !range.contains("+");
+		} catch (InvalidVersionSpecificationException e) {
+			return false;
+		}
+	}
+	//<< null
+
 	// Generates a barebones mod for a dependency
 	private static String generateModForDependency(Metadata metadata) {
 		String modId = (metadata.group() + "_" + metadata.name() + metadata.classifier())
@@ -267,7 +332,15 @@ public abstract class NestableJarGenerationTask extends AbstractLoomTask {
 		}
 	}
 
-	public record Metadata(String group, String name, String version, @Nullable String classifier) implements Serializable {
+	public record Metadata(
+		String group,
+		String name,
+		String version,
+		@Nullable String classifier,
+		//>> null
+		@Nullable String versionRange
+		//<< null
+	) implements Serializable {
 		@Override
 		public String classifier() {
 			if (classifier == null) {
diff --git a/src/test/resources/projects/includedJars/build.gradle b/src/test/resources/projects/includedJars/build.gradle
index 9e43712c..0c70b173 100644
--- a/src/test/resources/projects/includedJars/build.gradle
+++ b/src/test/resources/projects/includedJars/build.gradle
@@ -11,7 +11,11 @@ dependencies {
 	mappings 'net.fabricmc:yarn:1.18.2+build.1:v2'
 	modImplementation 'net.fabricmc:fabric-loader:0.13.3'
 
-	include 'org.apache.logging.log4j:log4j-core:2.22.0'
+	include('org.apache.logging.log4j:log4j-core:[2.0.0,3.0.0]') {
+		version {
+			prefer "2.22.0"
+		}
+	}
 
 	// Test bom/platform dependencies
 	include platform('net.kyori:adventure-bom:4.14.0')
